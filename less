# Icewheel Energy Key Beacon

This project is for users of the **icewheel-energy** application who run it on a local device (like a PC, Mac, or Raspberry Pi).

To connect with Tesla's Fleet API, you need a publicly accessible web address to host a special public key. Since your `icewheel-energy` app runs locally, it doesn't have a public address. This project solves that problem.

It provides a simple, secure, and easy-to-deploy web application that acts as a public "beacon" for your key, making it visible to Tesla at the required `/.well-known/appspecific/com.tesla.3p.public-key.pem` path.

**A Very Important Note on Security:** This project **never** sees, stores, or handles your private key. Your private key should be generated on your own computer and kept secret at all times. This application only ever needs your **public key**.

---

## How it Works

The process is simple:

1.  You generate a special public/private key pair on your own computer.
2.  You deploy this application to your Google Cloud account.
3.  You securely tell the deployed application what your **public key** is using Google's Secret Manager (a digital safe).
4.  The application then makes your public key available at the specific URL that Tesla needs to see.
5.  You can then use the built-in verification tool on the main page to confirm that Tesla has registered your key.

---

## Prerequisites

Before you begin, you will need:

1.  **A Google Cloud Account:** You can create one for free. You will need to enable billing, but the services we use have a generous free tier.
2.  **Google Cloud SDK (gcloud):** This is a command-line tool for interacting with your Google Cloud account. [Click here to install it](https://cloud.google.com/sdk/docs/install).
3.  **Node.js:** This is a JavaScript runtime needed to run the application. [Click here to install it](https://nodejs.org/en/download/).
4.  **Your Public Key:** You should have already generated a `public-key.pem` file using the `openssl` commands provided by Tesla.
5.  **Tesla Developer Account:** You must have registered your application on the [Tesla Developer Portal](https://developer.tesla.com/) and have your `Client ID` and `Client Secret`.

---

## Pre-deployment Checklist

Before you start the deployment, make sure you have completed the following. This will help prevent errors.

- [ ] You have a Google Cloud Project and have set your project ID in the `gcloud` CLI.
- [ ] You have enabled the required Google Cloud services (Cloud Build, Cloud Run, etc.).
- [ ] You have created the `tesla-public-key` secret in Google Secret Manager with your public key content.

**Note:** The deployment will not fail if the `tesla-public-key` secret is missing, but the application will not work correctly. The main page will show a "Not Configured" warning until the secret is properly linked in your Cloud Run deployment.

---

## Deployment Guide

This guide provides two methods for deploying the application. 

### A Note for Users Without a Custom Domain

If you do not have your own domain name, you can use the default URL generated by Google Cloud Run (which ends in `.a.run.app`). However, this creates a "chicken-and-egg" problem: you need the URL to register on the Tesla Portal, but you only get the URL after deploying.

To solve this, you must follow a **two-stage deployment**:
1.  **Deploy once** with a placeholder configuration just to reserve your unique URL.
2.  **Update the Tesla Portal** with this new URL to get your credentials.
3.  **Deploy a second time** with the final, correct configuration (including the public key secret).

This process is noted in the deployment steps below.

---

### Option A: Simple Deployment (Build & Deploy with Google Cloud)

This method uses Google Cloud's built-in tools to build and deploy your application in two steps.

#### Step 1: Build the Application Container

This command uses Google Cloud Build to package your application into a container. Replace `[YOUR_PROJECT_ID]` and `[a-service-name]` (e.g., `icewheel-key-beacon`).

```bash
gcloud builds submit --tag gcr.io/[YOUR_PROJECT_ID]/[a-service-name]
```

#### Step 2: Deploy to Cloud Run

This command deploys your container to Cloud Run. 

*   **For users without a custom domain:** Run this command first *without* the `--update-secrets` line to get your URL. Then, after updating the Tesla Portal, run the command *again* with the `--update-secrets` line to complete the setup.
*   **For users with a custom domain:** You can run the full command once.

```bash
gcloud run deploy [a-service-name] \
  --image gcr.io/[YOUR_PROJECT_ID]/[a-service-name] \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated \
  --update-secrets=TESLA_PUBLIC_KEY=tesla-public-key:latest
```

---


### Option B: Advanced Deployment (Deploy from GitHub Actions)

This method uses the automated GitHub Actions workflow to build the image, which you then deploy to Cloud Run.

#### Step 1: Make Your GitHub Package Public

For Google Cloud Run to access the image built by GitHub, the package must be public. 

1.  Go to your GitHub repository page.
2.  Click on the **"Packages"** link in the right-hand sidebar.
3.  Find your `icewheel-energy-key-beacon` package and click on it.
4.  Go to **"Package settings"**, and in the "Danger Zone", change the visibility to **"Public"**.

#### Step 2: Get Your Docker Image URL

1.  Push your code to the `main` branch.
2.  Go to the **"Actions"** tab in your GitHub repository and wait for the "Create and Publish Docker Image" workflow to complete successfully.
3.  Go back to the **"Packages"** page for your repository. You will see the new image listed with a specific tag (a long string of letters and numbers called a SHA).
4.  Copy the full **Image URL**, which will look something like this: `ghcr.io/your-username/icewheel-energy-key-beacon:sha-a1b2c3d`

#### Step 3: Deploy to Cloud Run

Now, use the image URL you just copied to deploy to Cloud Run.

*   **For users without a custom domain:** Run this command first *without* the `--update-secrets` line to get your URL. Then, after updating the Tesla Portal, run the command *again* with the `--update-secrets` line to complete the setup.
*   **For users with a custom domain:** You can run the full command once.

```bash
gcloud run deploy [a-service-name] \
  --image [YOUR_GHCR_IMAGE_URL] \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated \
  --update-secrets=TESLA_PUBLIC_KEY=tesla-public-key:latest
```

Replace `[a-service-name]` with your desired service name and `[YOUR_GHCR_IMAGE_URL]` with the URL you copied from GitHub Packages.

---

## Post-Deployment Steps

### Step 1: Get Your Partner Authentication Token

To use the verification tool on the main page, you need a **Partner Authentication Token**. You generate this token using the `Client ID` and `Client Secret` from your Tesla Developer account.

You can generate the token by running the following `curl` command in your terminal. 

**Important:** Replace `YOUR_CLIENT_ID` and `YOUR_CLIENT_SECRET` with your actual credentials.

```bash
curl --request POST \
  --url 'https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token' \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data-urlencode 'grant_type=client_credentials' \
  --data-urlencode 'client_id=YOUR_CLIENT_ID' \
  --data-urlencode 'client_secret=YOUR_CLIENT_SECRET' \
  --data-urlencode 'scope=openid user_data vehicle_device_data vehicle_cmds vehicle_charging_cmds energy_device_data energy_cmds offline_access' \
  --data-urlencode 'audience=https://fleet-api.prd.na.vn.cloud.tesla.com'
```

The command will return a JSON object. The value of the `access_token` field is your Partner Authentication Token.

### Step 2: Using the Application

After deploying, navigate to the main URL of your application. The index page serves three purposes:

1.  **View the Current Key:** It will show you the public key that the application is currently configured to serve.
2.  **Register Domain:** A form to register your domain with Tesla.
3.  **Verify Registration:** A form to check if a domain is successfully registered.

### Step 3: Final URL

Your public key is available at: `https://[your-service-url]/.well-known/appspecific/com.tesla.3p.public-key.pem`

---

## Running Locally (for Testing)

If you want to test the application on your own computer before deploying:

1.  Create a file named `.env.local` in the project's root directory.
2.  Add your public key to it: `TESLA_PUBLIC_KEY="...your key..."`
3.  Install dependencies: `npm install`
4.  Run the server: `npm run dev`

Your application will be running at `http://localhost:3000`.
